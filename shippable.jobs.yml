jobs:
 # - name: script-1
 #   type: runSh
 #   allowPublicAccess: true
 #   steps:
 #     - IN: trigger-1
 #     - IN: myParams
 #     - IN: myParams1
 #     - IN: sample-script-3
 #       showBuildStatus: true
 #     - OUT: dv-image
#      - IN: testprivate_gitRepo
#      - IN: sampleJav_gitRepo
 #     - OUT: sampleJav_gitRepo
#      - OUT: testprivate_ciRepo
 #     - TASK:
 #       - script: printenv
 #       - script: echo "ran ls 1234"
 #       - script: echo "lololo"
 #       - script: for i in {1..9}; do echo "$i"; done
 #       - script: echo "versionName=$BUILD_NUMBER" > /build/state/script-1.env
 #       - script: echo "versionName $BUILD_NUMBER"
 #       - script: echo "versionName=$IMAGE_TAG.$BUILD_NUMBER" > $JOB_STATE/dv-image.env
 #       - script: echo "versionName=$IMAGE_TAG.$BUILD_NUMBER" > $JOB_STATE/sampleJav_gitRepo.env
 #       - script: echo $key1
 #       - script: echo $key2
 #       - script: echo $foo
 #       - script: echo $test1
 #   on_success:
 #     - script: echo "on_success"
 #     - scirpt: echo $DVIMAGE_INTEGRATION_USERNAME
 #   always:
 #     - script: echo "always"
 #     - script: echo "lol"
 #     - NOTIFY: notification-slack
  #- name: script-10
  #  type: runSh
  #  steps:
  #    - IN: myParams
  #    - IN: aws-cli-config
  #    - TASK:
  #      - script: docker pull $test
  #      - script: sudo docker images
  #- name: script-quay-test
  #  type: runSh
  #  steps:
  #    - IN: quay-cli-config
  #    - TASK:
  #      - script: docker pull quay.io/1992_bharath/gitissues
  #- name: dtr-test
  #  type: runSh
  #  steps:
  #    - IN: dtr-cli-config
  #    - TASK:
  #      - script: ifconfig
  #      - script: docker pull quay.io/revathird/docker
  #- name: pdr-test
  #  type: runSh
  #  steps:
  #    - IN: pdr-cli-config
  #    - TASK:
  #      - script: docker pull 174.138.49.87/alpine
  - name: check_dns
    type: runSh
    steps:
      - TASK:
        - script: cat /etc/resolv.conf
  - name: mac
    type: runSh
    runtime:
      architecture: x86_64
      os: Ubuntu_16.04
      container: false
    steps:
      - TASK:
          name: 1st time in mac
          script: |
            ls
            export x="abc"
            echo $x
            export y='abc"d:e'
            echo $y
            echo lol
  - name: sleep-5m
    type: runSh
    runtime:
      architecture: x86_64
      os: Ubuntu_14.04
      container: true
      options:
        pull: false
    steps:
      - IN: docker-cli-config
      - IN: state
      - OUT: state
      - IN: sample-script-3
      - OUT: sampleGol_ciRepo
      - IN: printenv
      #- TASK:
      #    name: exit 0
      #    script: 
      #      - exit 0
      - TASK:
          name: pwd-multi
          script: |
            pwd
            export x="abdc"
            echo $x
            export y='abc"d:e'
            echo $y
            echo lol
      - TASK:
          name: no pull boiz
          script: 
            - printenv
            - shipctl get_resource_version_key state 
            - date_now=$(date -Iseconds)
            - shipctl put_resource_state state cluster "$date_now"
            - ls /build || true
            - printenv
            - ls $BUILD_DIR/previousState
      - TASK:
          name: on host
          runtime:
            container: false
          script: 
            - echo lol
            - ls /build || true
            - printenv
      - TASK:
          name: multi-linz-yall
          runtime:
            container: true
          script: |
            echo line1111
            sl
            echo line3
    on_success:
      - script: echo "success :)"
      - script: sl
      - script: echo lol
    on_failure:
      - script: echo "failure :("
    always:
      - script: echo "always :|"
      #- TASK:
      #    name: adding container task envs
      #    runtime:
      #      options:
      #        env:
      #          task: third
      #          env2: lol
      #    script: 
      #      - echo r
      #      - shipctl get_resource_version_key state cluster
      #      - date_now=$(date -Iseconds)
      #      - shipctl put_resource_state state cluster "$date_now"
      #      - ls /build || true
      #      - printenv
      #- TASK:
      #    name: on host the 2nd time
      #    runtime:
      #      container: false
      #      options:
      #        env:
      #          task: host
      #          env3: lol
      #    script: 
      #      - echo lol
      #      - ls /build || true
      #      - printenv

  - name: simple-curl
    type: runSh
    steps:
      - IN: state
      - TASK:
        - script: >
            curl -H "Content-Type: application/json" https://api.shippable.com
  - name: pipe-error
    type: runSh
    steps:
      - TASK:
        - script: |
            echo hi
            abc
            echo bye
  - name: exit-0
    type: runSh
    steps:
      - IN: test-github
        switch: off
      - TASK:
        - script: docker images
        - script: docker ps -a
        - script: GITHUB_API_KEY=$(shipctl get_integration_resource_field "test-github" "TOKEN")
        - script: echo $GITHUB_API_KEY
        - script: |
            echo '{ "foo": "${GITHUB_API_KEY}" }' > test.json
        - script: shipctl replace test.json
        - script: cat test.json
  - name: incorrect_command_on_success
    type: runSh
    steps:
      - TASK:
        - script: exit 0
    on_success:
      - script: sl
  - name: incorrect_command_on_success_then_always
    type: runSh
    steps:
      - TASK:
        - script: exit 0
    on_success:
      - script: sl
    always:
      - script: echo foo
  - name: exit_0_in_on_success
    type: runSh
    steps:
      - TASK:
        - script: echo foo
    on_success:
      - script: exit 0
    always:
      - script: echo always
  - name: exit_1_in_on_success
    type: runSh
    steps:
      - TASK:
        - script: echo foo
    on_success:
      - script: exit 1
    always:
      - script: echo always
  - name: exit_0_in_on_fail
    type: runSh
    steps:
      - TASK:
        - script: sl
    on_failure:
      - script: sleep 5
      - script: exit 0
    always:
      - script: echo always
  - name: return_0_in_on_fail
    type: runSh
    steps:
      - TASK:
        - script: sl
    on_failure:
      - script: sleep 5
      - script: return 0
    always:
      - script: echo always
  - name: testing-stuff
    type: runSh
    runtime:
      container: true
    steps:
      - TASK:
          name: ls
          script: ls
      - TASK:
          name: ls, pwd
          script:
          - ls
          - pwd
      - TASK:
          name: ls, foo
          script: |
            ls
            echo foo
      - TASK:
          name: sl
          script: sl
    
  - name: simple-runsh-U1404
    type: runSh
    runtime:
      cluster: testu14cluster
    steps:
      - TASK:
        - script: printenv
  - name: simple-runsh-U1604
    type: runSh
    runtime:
      nodePool: u16custom
    steps:
      - TASK:
        - script: printenv
  
  - name: simple-runsh-centos
    type: runSh
    steps:
      - TASK:
        - script: printenv
  
  - name: simple-runsh-macos
    type: runSh
    runtime:
      cluster: macCustom
      container: false
    steps:
      - TASK:
        - script: sleep 120
        
  - name: print-versions
    type: runSh
    steps:
    - TASK:
      - script: aws --version
      - script: az --version
      - script: terraform --version
      - script: kubectl version || true
      - script: gcloud --version
      - script: eb --version
      - script: packer --version
  - name: printenv
    type: runSh
    os: Ubuntu_14.04
    architecture: x86_64
    steps:
    - IN: myParams1
    - OUT: state
    - TASK:
      - script: printenv
      - script: shipctl put_resource_state state check_state state_check
  - name: pull-aws-image
    type: runSh
    steps:
    - IN: oldAwsInt
    - TASK:
      - script: aws --version
      - script: docker pull 374168611083.dkr.ecr.us-east-1.amazonaws.com/api
      - script: docker images
  - name: pull-docker-image
    type: runSh
    steps:
    - IN: docker_reg_config
    - TASK:
      - script: docker pull bharath92/gitissues
      - script: docker images
  - name: push-gcr-image
    type: runSh
    steps:
    - IN: gcr-config
    - TASK:
      - script: gcloud --version
      - script: docker pull alpine
      - script: docker images
      - script: docker tag alpine gcr.io/sunlit-pixel-182606/alpine
      - script: gcloud docker -- push gcr.io/sunlit-pixel-182606/alpine
  - name: kube-test
    type: runSh
    steps:
    - IN: gke-config
    - TASK:
      - script: echo kubectl
      - script: kubectl version
      - script: kubectl get namespaces
  - name: quay-tester
    type: runSh
    steps:
    - IN:  old-dtr-cli-config
    - TASK:
      - script: docker pull quay.io/revathird/cock1_nod_multiple123
  - name: packer-tester
    type: runSh
    steps:
    - IN: sample-script-3
    - IN: shrivara-aws
    - TASK:
      - script: pushd IN/sample-script-3/gitRepo
      - script: packer --version
      - script: packer validate packer-example.json
      - script: packer build -var "aws_access_key=$aws_access_key" -var "aws_secret_key=$aws_secret_key" packer-example.json
      - script: popd
  - name: simple-runsh-centos7
    type: runSh
    runtime:
      cluster: c07custom
    steps:
    - IN: bb-repo
    - IN: sample-script-3
    - IN: gitlab-repo
    - IN: sample-runsh_master
    - TASK:
      - script: printenv
      - script: echo "gitlab" && ls $GITLABREPO_PATH/gitRepo
      - script: echo "bb" && ls $BBREPO_PATH/gitRepo
      - script: echo "gh" && ls $SAMPLESCRIPT3_PATH/gitRepo
      - script: echo "syncrepo" && $SAMPLERUNSHMASTER_PATH/syncRepo
  - name: default_cluster_job
    type: runSh
    steps:
    - TASK:
      - script: echo "hi :)"


  - name: old-docker-test
    type: runSh
    steps:
    - IN: old-docker
    - TASK:
      - script: echo hey
      - script: cat /root/.docker/config.json
      - script: docker pull bharath92/gitissues
  #- name: script-11
  #  type: runCLI
  #  steps:
  #    - IN: trigger-1
  #    - IN: myParams1
  #    - IN: myParams
  #    - IN: sample-script-3
  #    - TASK:
  #      - script: echo $key1
  #      - script: echo $key2
  #      - script: echo $foo
  #      - script: echo $test1
  #  on_success:
  #    - script: echo "on_success"
  #    - scirpt: echo $DVIMAGE_INTEGRATION_USERNAME
  #  always:
  #    - script: echo "always"
  #    - script: echo "lol"
  #    - NOTIFY: notification-slack
  #- name: script-101
  #  type: runSh
  #  steps:
  #    - IN: docker-cli-config
  #    - TASK:
  #      - script: echo hey
  #      - script: aws --version
  #      - script: docker -v
  #      - script: docker pull bharath92/gitissues
  #- name: script-1111
  #  type: runCLI
  #  steps:
  #    - IN: script-101
  #    - IN: docker-cli-config
  #    - TASK:
  #      - script: echo hhhh
  #      - script: docker -v
  #      - script: docker pull bharath92/gitissues
  #- name: dv-man-versionName
  #  type: manifest
  #  steps:
  #    - IN: script-1
  #    - IN: dv-image
  #      pull: false
  #      versionName: latest
  #  on_success:
  #    - script: echo "on_success_man"
 # - name: split-branch-hippo-cms-runSh
 #   type: runSh
 #   allowPublicAccess: true
 #   steps:
 #     - IN: dv-man-versionName
 #     - IN: trigger-1
 #     - IN: dv-image
 #     - IN: sample-script-3
 #       showBuildStatus: true
 #     - IN: rc_api_params
 #     - TASK:
 #       - script: ./IN/sample-script-3/gitRepo/check_queue.sh rc
 #       - script: ./IN/sample-script-3/gitRepo/echo.sh
 #   on_success:
 #     - script: echo "success"
 #   on_failure:
 #     - script: echo "on_failure"
 # - name: testprivate_runCI
 #   type: runCI
 #   steps:
 #     - IN: script-1
 #     - IN: testprivate_ciRepo
 # - name: test_lol
 #   type: runSh
 #   steps:
 #     - IN: sampleJav_gitRepo
 #     - TASK:
 #       - script: echo lol
 # - name: sampleJav_runCI
 #   type: runCI
 #   steps:
 #     - IN: test_lol
 #     - IN: sampleJav_ciRepo
 #     - OUT: dv-image
  - name: sampleGol_runCI
    type: runCI
    steps:
      - IN: sampleGol_ciRepo
  
